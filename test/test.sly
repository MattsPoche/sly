;; (define (pair x y)
;;   (lambda (f) (f x y)))

;; (define (fst p)
;;   (p (lambda (x y) x)))

;; (define (snd p)
;;   (p (lambda (x y) y)))

;; (define p1 (pair 'hello 'world))
;; (define p2 (pair 'foo 'bar))

;; (display (fst p1)) (newline)
;; (display (snd p1)) (newline)

;; (display (fst p2)) (newline)
;; (display (snd p2)) (newline)
;; (define (f x y)
;;   (+ (g x) (g y)))

;; (define (g x)
;;   (* x 2))

;; (display (f 69 420)) (newline)
;; (display (f 34 29)) (newline)

;; (display (call-with-values
;; 			 (lambda () (values 4 5))
;; 		   (lambda (x y) x)))
;; (newline)

;; (define meta-table-index-name 0)
;; (define meta-table-index-layout 1)
;; (define meta-table-index-printer 2)
;; (define <base-meta-table> (make-record 3 #f))

;; (define (meta-table-printer tbl)
;;   (display "($ ")
;;   (display (record-ref tbl meta-table-index-name))
;;   (display ")"))

;; (define (instanciate-meta-table meta-table)
;;   (make-record (bytevector-length
;; 				(record-ref meta-table meta-table-index-layout))
;; 			   meta-table))

;; (define (make-meta-table name layout printer)
;;   (define mt (instanciate-meta-table <base-meta-table>))
;;   (record-set! mt meta-table-index-name name)
;;   (record-set! mt meta-table-index-layout layout)
;;   (if printer
;; 	  (record-set! mt meta-table-index-printer printer)
;; 	  (record-set! mt meta-table-index-printer
;; 				   (record-ref <base-meta-table> meta-table-index-printer)))
;;   mt)

;; (record-set! <base-meta-table> meta-table-index-name '<base-meta-table>)
;; (record-set! <base-meta-table> meta-table-index-layout #u8(1 1 1))
;; (record-set! <base-meta-table> meta-table-index-printer meta-table-printer)
;; (record-meta-set! <base-meta-table> <base-meta-table>)
;; (display meta-table-printer)
;; (newline)
;; (display (record-ref <base-meta-table> meta-table-index-printer))
;; (newline)
;; (display <base-meta-table>)
;; (newline)
(include "test/include-test.scm")

(display "Hello again!!!\nWe're in \"test.sly\"!!!\n")

(define fd (open-fd-ro "test/test.sly"))

(define (bytes->char-list bv)
  (define (loop bv i)
	(if (< i (bytevector-length bv))
		(cons (integer->char (bytevector-u8-ref bv i))
			  (loop bv (+ i 1)))
		'()))
  (loop bv 0))

(define bytes (read-fd fd (make-bytevector #xff)))
(close-fd fd)
(display bytes)
(newline)

(display (string #\h #\e #\l #\l #\o))
(newline)
(display bytes->char-list)
(newline)
(display (apply string (bytes->char-list bytes)))
(newline)
