
(define (g x) (* x x))
(define (h x) (+ x x))
(define (f x y)
  (/ (g x) (h y)))
(display g)
(display h)
(display f)
(f 5 6)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define (f g x y)
;;   (+ (g x) y))

;; (display f)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define (h x)
;;   (* x w))

;; (define (f g y)
;;   (+ (g y) (h z)))

;; (define z 5)
;; (define w 7)

;; (display f)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define (main)
;;   (define (foo)
;; 	(+ 5 n))

;;   (define (bar x)
;; 	(* (foo) x))

;;   (define (baz x y)
;; 	(+ x y))

;;   (define n 69)

;;   (display (foo))
;;   (display (bar 420))
;;   (display (bar 360))
;;   (display (baz 7 4))
;;   (display (baz 3 4)))

;; (display main)
;; (main)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define x 69)
;; (define y 420)
;; (define (f)
;;   (+ x y))
;; (display f)
;; (display (f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define (count p)
;;   (define (f xs)
;; 	(if (null? xs) 0
;; 		(if (p (car xs))
;; 			(+ 1 (f (cdr xs)))
;; 			(f (cdr xs)))))
;;   f)

;; (define (curry f)
;;   (lambda (x)
;; 	(lambda (y)
;; 	  (f x y))))

;; (define countzeros (count ((curry (lambda (w z) (= w z))) 0)))

;; (display countzeros)
;(display (countzeros '(0 3 4 5 3 0 8 27 1 3 9 0)))
;(display "\n")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define (add x)
;;   (lambda (y)
;; 	(+ x y)))

;; (display add)
;; (display "\n")
;; (display ((add 5) 6))
;; (display "\n")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define (foo x y)
;;   (lambda () (+ x y)))

;; ((foo 5 6))

;; (if #f
;; 	(begin
;; 	  (define (foo x)
;; 		(if (> x 0)
;; 			(begin (display x)
;; 				   (foo (- x 1)))
;; 			(void)))
;; 	  (foo 10))
;; 	(void))

;; fix test
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (define n 10)
;; (define (foo x) (+ x n))
;; (define (bar x) (- x n))

;; (display (foo 5))
;; (set! n 5)
;; (display (bar 5))
;; (display n)

;;((lambda (x y) (* x y)) 6 5)

;; (define (loop x)
;;   (if (> x 0)
;; 	  (begin (display x)
;; 			 (loop (- x 1)))
;; 	  (display "done")))
;; (loop 10)

;; (define x 3)
;; (define (foo x y) (* x y))
;; (display (/ (foo 69 420) x))
;; (display x)
