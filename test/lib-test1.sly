(require "sly-lib/base.sly")

(display "(and #t #t) => ")(display (and #t #t))(display "\n")
(display "(and #t #f) => ")(display (and #t #f))(display "\n")
(display "(and #f #t) => ")(display (and #f #t))(display "\n")
(display "(and #f #f) => ")(display (and #f #f))(display "\n")
(display "(or #t #t)  => ")(display (or #t #t))(display "\n")
(display "(or #t #f)  => ")(display (or #t #f))(display "\n")
(display "(or #f #t)  => ")(display (or #f #t))(display "\n")
(display "(or #f #f)  => ")(display (or #f #f))(display "\n")

(let ((x "hello")
	  (y "world"))
  (display x)(display "\n")
  (display y)(display "\n"))

(displayln "Begin loop")
(let loop ((i 0))
  (if (< i 10)
	  (begin
		(displayln i)
		(loop (+ i 1)))
	  (displayln "End loop")))

(displayln "begin let*")
(let* ((x 69)
	   (y 420)
	   (z (+ x y)))
  (displayln x)
  (displayln y)
  (displayln z))

(for-each (lambda (x) (displayln x)) '(a b c d e f g))

(define (range start end)
  (if (= start end)
	  '()
	  (cons start (range (+ start 1) end))))

(define (fizz-buzz n)
  (cond ((and (= (% n 3) 0) (= (% n 5) 0))
		 (display "fizz buzz, "))
		((= (% n 3) 0)
		 (display "fizz, "))
		((= (% n 5) 0)
		 (display "buzz, "))
		(else
		 (begin
		   (display n)
		   (display ", ")))))

(for-each fizz-buzz (range 0 100)) (display "\n")

(when #t
  (displayln "when is it not?"))

(displayln "Begin letrec")

;; TODO: letrec is broken

(displayln
 (letrec* ((even? (lambda (n)
                   (if (zero? n)
                       #t
                       (odd? (- n 1)))))
          (odd? (lambda (n)
                  (if (zero? n)
                      #f
                      (even? (- n 1))))))
   (even? 88)))
(displayln "End letrec")

(when #f ;; this should fail
  (letrec* ((a 42)
           (b (+ a 10)))  ;; Illegal access
	(* a b)))

(displayln
 (letrec* ((x (lambda (n)
				(if (> n 3) n (x (+ n 1)))))
           (y 1))
   (x y)))

(displayln
 (letrec* ((a 42)
           (b (+ a 10)))
   (* a b)))
