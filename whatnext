#!/usr/bin/env python3

help_msg = '''Search files and directories for TODOs.
Directories are searched recursively.
Uses ansi escape codes to output in color.
By default only prints color escapes if sys.stdout.isatty() == True.

options:
-h, --help           Print this message and exit.
--color=on           Forces color output on.
--color=off          Forces color output off.
--filter=[regexp]    Only check file names that match [regexp].
--filter [regexp]    Like above, but next arg is [regexp].

Anything else is taken as a directory or file name or ignored.
'''

import sys
import os
import re

TODO_TAG = 'TODO:'
MULTI_LINE_TAG = '*'

def argv_iter():
	argc = 0
	while argc < len(sys.argv):
		yield sys.argv[argc]
		argc += 1

def print_todos(file_path, color):
	COLOR_RED = ""
	COLOR_RESET = ""
	if color:
		COLOR_RED = "\x1b[1;31m"
		COLOR_RESET = "\x1b[0m"

	lines = []
	try:
		with open(file_path, 'r') as f:
			lines = list(map(lambda line: line.rstrip(), f.readlines()))
	except UnicodeDecodeError:
		print(f'Unable to parse file: {file_path}', file=sys.stderr)
		return
	i = 0
	while i < len(lines):
		c = lines[i].find(TODO_TAG)
		if c > -1:
			print(f'{COLOR_RED}{file_path}:{i+1}:{c}:{COLOR_RESET}')
			print('|', lines[i][c:])
			i += 1
			while i < len(lines):
				c = lines[i].find(MULTI_LINE_TAG)
				if c == -1:
					break
				c += 1
				if lines[i][c] == '/':
					break
				print('|', " " * 6 + lines[i][c:].lstrip())
				i += 1
		else:
			i += 1

def do_dir(directory, file_filter):
	files = []
	for root, _, fs in os.walk(directory):
		for f in fs:
			name = os.path.join(root, f)
			if file_filter:
				if re.match(file_filter, name):
					files.append(name)
			else:
				files.append(name)
	for f in files:
		print_todos(f, color)

if __name__ == '__main__':
	# only print color codes if stdout is a terminal
	color = sys.stdout.isatty()
	args = argv_iter()
	file_filter = ""
	completed = []
	if len(sys.argv) <= 1:
		print(help_msg)
		exit(0)
	next(args)
	for arg in args:
		if arg == '-h' or arg == '--help':
			print(help_msg)
			exit(0)
		elif arg == '--color=on':
			color = True
		elif arg == '--color=off':
			color = False
		elif arg == '--filter':
			file_filter = next(args)
		elif arg.startswith('--filter='):
			file_filter = arg[9:]
		else:
			if arg not in completed:
				if os.path.isfile(arg):
					print_todos(arg, color)
				elif os.path.isdir(arg):
					do_dir(arg, file_filter)
			completed.append(arg)
	if len(completed) == 0:
		do_dir("./", file_filter)
