(define-syntax (comp-debug x)
  (display "COMP-DEBUG :: ")
  (display (car (cdr (syntax->datum x))))
  (display "\n")
  (datum->syntax x #f))

(define (displayln x) (display x)(display "\n"))

(define (cadr p)
  (car (cdr p)))

(define (cddr p)
  (cdr (cdr p)))

(define (caddr p)
  (car (cddr p)))

(define (cdddr p)
  (cdr (cddr p)))

(define (cadddr p)
  (car (cdddr p)))

(define (fold-left f z xs)
  (if (null? xs)
	  z
	  ((lambda (x xs)
		 (fold-left f (f z x) xs))
	   (car xs) (cdr xs))))

(define (fold-right f z xs)
  (if (null? xs)
	  z
	  ((lambda (x xs)
		 (f x (fold-right f z xs)))
	   (car xs) (cdr xs))))

(define (append xs . rest)
  (define (helper xs rest)
	  (if (pair? rest)
		  (helper (fold-right cons (car rest) xs) (cdr rest))
		  xs))
  (helper xs rest))

(define (last-pair xs)
  (if (pair? (cdr xs))
	  (last-pair (cdr xs))
	  xs))

(define (append! xs . rest)
  (define (helper xs rest)
	(if (pair? rest)
		(if (null? xs)
			(helper (car rest) (cdr rest))
			(begin
			  ((lambda (lp) (set-cdr! lp (car rest))) (last-pair xs))
			  (helper xs (cdr rest))))
		xs))
  (helper xs rest))

(define (length xs)
  (fold-left (lambda (x xs) (+ x 1)) 0 xs))

(define (compose . fs)
  (define (*compose* fs)
	(if (null? fs)
		(lambda (x) x)
		(lambda (x) ((car fs) ((*compose* (cdr fs)) x)))))
  (*compose* fs))

(define (count val xs)
  (fold-right
   (lambda (x c) (if (equal? x val) (+ c 1) c))
   0 xs))

(define (map f xs)
  (fold-right (lambda (x xs) (cons (f x) xs)) '() xs))

(define (for-each f xs)
  (if (pair? xs)
	  (begin
		(f (car xs))
		(for-each f (cdr xs)))
	  (if (not (null? xs))
		  (f  xs)
		  #f)))

(define (range arg . rest)
  (define (*range start end step)
	(if (< start end)
		(cons start (range (+ start step) end step))
		'()))
  (if (= (length rest) 0)
	  (*range 0 arg 1)
	  (if (= (length rest) 1)
		  (*range arg (car rest) 1)
		  (if (= (length rest) 2)
			  (*range arg (car rest) (car (cdr rest)))
			  #f))))
