(define (displayln x) (display x)(display "\n"))

(define (caar p)
  (car (car p)))

(define (cdar p)
  (cdr (car p)))

(define (cadr p)
  (car (cdr p)))

(define (cddr p)
  (cdr (cdr p)))

(define (caddr p)
  (car (cddr p)))

(define (cdddr p)
  (cdr (cddr p)))

(define (cadddr p)
  (car (cdddr p)))

(define (zero? n) (= n 0))

(define (fold-left f z xs)
  (if (null? xs)
	  z
	  ((lambda (x xs)
		 (fold-left f (f x z) xs))
	   (car xs) (cdr xs))))

(define (fold-right f z xs)
  (if (null? xs)
	  z
	  ((lambda (x xs)
		 (f x (fold-right f z xs)))
	   (car xs) (cdr xs))))

(define (append xs . rest)
  (define (helper xs rest)
	  (if (pair? rest)
		  (helper (fold-right cons (car rest) xs) (cdr rest))
		  xs))
  (helper xs rest))

(define (reverse ls)
  (fold-left cons '() ls))

(define (last-pair xs)
  (if (pair? (cdr xs))
	  (last-pair (cdr xs))
	  xs))

(define (list-copy xs)
  (fold-right cons '() xs))

(define (length xs)
  (fold-left (lambda (x y) (+ y 1)) 0 xs))

(define (list-ref xs i)
  (if (null? xs)
	  '**END-OF-LIST**
	  (if (zero? i)
		  (car xs)
		  (list-ref (cdr xs) (- i 1)))))

(define (count val xs)
  (fold-right
   (lambda (x c) (if (equal? x val) (+ c 1) c))
   0 xs))

(define (*heads* xs)
  (if (null? xs)
	  '()
	  (cons (caar xs) (*heads* (cdr xs)))))

(define (*tails* xs)
  (if (null? xs)
	  '()
	  (cons (cdar xs) (*tails* (cdr xs)))))

(define (map f . xs)
  (if (null? (car xs))
	  '()
	  (cons (apply f (*heads* xs))
			(apply map f (*tails* xs)))))

(define (for-each f . xs)
  (if (null? (car xs))
	  '()
	  (begin
		(apply f (*heads* xs))
		(apply for-each f (*tails* xs)))))


;; module exports
(define exported-variables
  (list (cons 'displayln displayln)
		(cons 'caar caar)
		(cons 'cddr cddr)
		(cons 'cdar cdar)
		(cons 'cadr cadr)
		(cons 'caddr caddr)
		(cons 'cdddr cdddr)
		(cons 'cadddr cadddr)
		(cons 'zero? zero?)
		(cons 'fold-left fold-left)
		(cons 'fold-right fold-right)
		(cons 'append append)
		(cons 'reverse reverse)
		(cons 'last-pair last-pair)
		(cons 'list-copy list-copy)
		(cons 'length length)
		(cons 'list-ref list-ref)
		(cons 'length length)
		(cons 'count count)
		(cons 'map map)
		(cons 'for-each for-each)))

(list exported-variables '()) ;; exported module
