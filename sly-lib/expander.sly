(require "sly-lib/list.sly")

(define core-forms
  (list 'define
		'lambda
		'quote
		'syntax-quote
		'set!
		'begin
		'if
		'define-syntax
		'call-with-continuation
		'call/cc
		'require))

(define scope gensym)

(define core-scope (scope))

(define imported '())

(define all-bindings '())

(define (add-binding! id binding)
  (set! all-bindings (assoc-set all-bindings id binding)))

(for-each (lambda (sym)
			(add-binding! (syntax sym (list core-scope)) sym))
		  core-forms)

(define (adjust-scope s sc op)
  (if (syntax? s)
	  (syntax (syntax->datum s)
			  (op (syntax-scopes s) sc))
	  (if (list? s)
		  (map (lambda (e)
				 (adjust-scope e sc op)) s)
		  s)))

(define (set-flip s e)
  (if (contains s e)
	  (remove s e)
	  (set-add s e)))

(define (add-scope s sc)
  (adjust-scope s sc set-add))

(define (flip-scope s sc)
  (adjust-scope s sc set-flip))

(define (resolve id)
  (define candidate-ids (find-all-matching-bindings id))
  (define max-id (void))
  (if (null? candidate-ids)
	  (error "Error unresolved identefier:"
			 id
			 (syntax-source-info id))
	  (begin
		(set! max-id (argmax (lambda (id) (length (syntax-scopes id)))
							 candidate-ids))
		(check-unambiguous max-id candidate-ids)
		(assoc-lookup all-bindings max-id))))

(define (find-all-matching-bindings id)
  (fold-left (lambda (b xs)
			   (define c-id (car b))
			   (if (if (eq? (syntax->datum c-id) (syntax->datum id))
					   (subset? (syntax-scopes c-id) (syntax-scopes id)) #f)
				   (cons c-id xs)
				   xs)) '() all-bindings))

(define (check-unambiguous max-id candidate-ids)
  (for-each (lambda (c-id)
			  (if (subset? (syntax-scopes c-id)
						   (syntax-scopes max-id))
				  #t
				  (error "ambiguous:" max-id)))
			candidate-ids))

(define (introduce s)
  (add-scope s core-scope))

(define variable (gensym))

(define (empty-env) (make-dictionary))

(define (env-extend env key value)
  (dictionary-set! env key value)
  env)

(define (env-lookup env key)
  (dictionary-ref env key #f))

(define (expand s env)
  (if (identifier? s)
	  (expand-identifier s env)
	  (if (if (pair? s) (identifier? (car s)) #f)
		  (expand-id-application-form s env)
		  (if (list? s)
			  (expand-app s env)
			  ;; self evaluating?
			  ;; (error "error (1) bad syntax:" (syntax->datum s))
			  s))))

(define (expand-identifier s env)
  (define binding (resolve s))
  (define v (void))
  (if (not binding)
	  (error "free variable:" (syntax->datum s))
	  (if (contains imported binding) s
		  (if (contains core-forms binding)
			  (error "error (2) bad syntax:" (syntax->datum s))
			  (begin
				(set! v (env-lookup env binding))
				(if (eq? v variable) s
					(if (not v)
						(error "out of context" (syntax->datum s))
						(error "error (3) bad syntax" (syntax->datum s)))))))))

(define (expand-id-application-form s env)
  (define binding (resolve (car s)))
  (define v (void))
  (if (equal? binding 'lambda)
	  (expand-lambda s env)
	  (if (if (equal? binding 'define) #t
			  (equal? binding 'define-syntax))
		  (expand-define s env)
		  (if (equal? binding 'quote) s
			  (if (equal? binding 'syntax-quote) s
				  (if (equal? binding 'require) s
					  (if (contains core-forms binding)
						  (expand-core-form s env)
						  (begin
							(set! v (env-lookup env binding))
							(if (procedure? v)
								(expand (apply-transformer v s) env)
								(expand-app s env))))))))))

(define (apply-transformer t s)
  (define intro-scope (scope))
  (define intro-s (add-scope s intro-scope))
  (define transformed-s (t intro-s))
  (flip-scope transformed-s intro-scope))

(define (expand-app s env)
  (map (lambda (sub-s) (expand sub-s env))
	   s))

(define (add-arg-scope args sc)
  (if (null? args) args
	  (if (pair? args)
		  (cons (add-scope (car args) sc)
				(add-arg-scope (cdr args) sc))
		  (add-scope args sc))))

(define (add-arg-bindings args env)
  (define binding (void))
  (if (null? args) args
	  (if (pair? args)
		  (begin
			(add-arg-bindings (car args) env)
			(add-arg-bindings (cdr args) env))
		  (begin
			(set! binding (gensym))
			(add-binding! args binding)
			(env-extend env binding variable)))))

(define (expand-lambda s env)
  (define lambda-id (car s))
  (define arg-ids (cadr s))
  (define body (cddr s))
  (define sc (scope))
  (define ids (add-arg-scope arg-ids sc))
  (add-arg-bindings ids env)
  (define exp-body (expand (add-scope body sc)
						   env))
  (append (list lambda-id ids) exp-body))

(define (expand-core-form s env)
  (define id (car s))
  (define exp-body (expand (cdr s) env))
  (cons id exp-body))

(define (expand-define s env)
  (define define-id (car s))
  (define lhs (cadr s))
  (define rest (cddr s))
  (define rhs (void))
  (define binding (gensym))
  (define scopes (syntax-scopes define-id))
  (if (pair? lhs) ;; procedure define
	  (begin
		(add-binding! (car lhs) binding)
		(env-extend env binding variable)
		(set! rhs (expand (append (list (syntax 'lambda scopes) (cdr lhs)) rest) env))
		(set! lhs (car lhs)))
	  (if (identifier? lhs)
		  (begin
			(add-binding! lhs binding)
			(env-extend env binding variable)
			(set! rhs (expand (car rest) env)))
		  (error "error bad syntax:" (syntax->datum s))))
  (list define-id lhs rhs))

(define (compile s)
  (define r (void))
  (if (identifier? s) (resolve s)
	  (if (pair? s)
		  (if (identifier? (car s))
			  (begin
				(set! r (resolve (car s)))
				(if (equal? r 'lambda)
					(compile-lambda s)
					(if (equal? r 'quote) s
						(if (equal? r 'syntax-quote) s
							(map compile s)))))
			  (map compile s))
		  s)))

(define (resolve-args args)
  (if (null? args) args
	  (if (pair? args)
		  (cons (resolve-args (car args))
				(resolve-args (cdr args)))
		  (resolve args))))

(define (compile-lambda s)
  (define lambda-id (car s))
  (define ids (cadr s))
  (define body (cddr s))
  (append (list  lambda-id (resolve-args ids)) (compile body)))

(define (register-variables ls env)
  (for-each (lambda (v)
			  (set! imported (cons v imported))
			  (add-binding! (syntax v (list core-scope)) v)
			  (env-extend env v variable))
			ls))

(define (register-macros alist env)
  (for-each (lambda (p)
			  (add-binding! (syntax (car p) (list core-scope))
							(car p))
			  (env-extend env (car p) (cdr p)))
			alist))

(define (begin-expansion form vars macros)
  (define env (empty-env))
  (register-variables vars env)
  (register-macros macros env)
  (define *form
	(expand (introduce (syntax->list form)) env))
  (datum->syntax form (compile *form)))

(define exported-variables
  (list (cons 'expand begin-expansion)))

(list exported-variables '())
