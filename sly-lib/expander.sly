(define (displayln x) (display x)(display "\n"))

(define (caar p)
  (car (car p)))

(define (cdar p)
  (cdr (car p)))

(define (cadr p)
  (car (cdr p)))

(define (cddr p)
  (cdr (cdr p)))

(define (caddr p)
  (car (cddr p)))

(define (cdddr p)
  (cdr (cddr p)))

(define (cadddr p)
  (car (cdddr p)))

(define (zero? n) (= n 0))

(define (fold-left f z xs)
  (if (null? xs)
	  z
	  ((lambda (x xs)
		 (fold-left f (f x z) xs))
	   (car xs) (cdr xs))))

(define (fold-right f z xs)
  (if (null? xs)
	  z
	  ((lambda (x xs)
		 (f x (fold-right f z xs)))
	   (car xs) (cdr xs))))

(define (contains xs x)
  (if (null? xs)
	  #f
	  (if (equal? (car xs) x)
		  #t
		  (contains (cdr xs) x))))

(define (remove xs x)
  (if (null? xs)
	  xs
	  (if (equal? (car xs) x)
		  (cdr xs)
		  (cons (car xs)
				(remove (cdr xs) x)))))

(define (append xs . rest)
  (define (helper xs rest)
	  (if (pair? rest)
		  (helper (fold-right cons (car rest) xs) (cdr rest))
		  xs))
  (helper xs rest))

(define (reverse ls)
  (fold-left cons '() ls))

(define (last-pair xs)
  (if (pair? (cdr xs))
	  (last-pair (cdr xs))
	  xs))

(define (list-copy xs)
  (fold-right cons '() xs))

(define (length xs)
  (fold-left (lambda (x y) (+ y 1)) 0 xs))

(define (list-ref xs i)
  (if (null? xs)
	  '**END-OF-LIST**
	  (if (zero? i)
		  (car xs)
		  (list-ref (cdr xs) (- i 1)))))

(define (count val xs)
  (fold-right
   (lambda (x c) (if (equal? x val) (+ c 1) c))
   0 xs))

(define (argmax f xs)
  (define max 0)
  (define x 0)
  (define item '())
  (define (loop f xs)
	(if (null? xs)
		item
		(begin (set! x (f (car xs)))
			   (if (> x max)
				   (begin
					 (set! max x)
					 (set! item (car xs)))
				   (void))
			   (loop f (cdr xs)))))
  (loop f xs))

(define (*heads* xs)
  (if (null? xs)
	  '()
	  (cons (caar xs) (*heads* (cdr xs)))))

(define (*tails* xs)
  (if (null? xs)
	  '()
	  (cons (cdar xs) (*tails* (cdr xs)))))

(define (map f . xs)
  (if (null? (car xs))
	  '()
	  (cons (apply f (*heads* xs))
			(apply map f (*tails* xs)))))

(define (for-each f . xs)
  (if (null? (car xs))
	  '()
	  (begin
		(apply f (*heads* xs))
		(apply for-each f (*tails* xs)))))

(define (set-add xs x)
  (if (contains xs x)
	  xs
	  (cons x xs)))

(define (set-union xs ys)
  (if (null? ys)
	  xs
	  (if (null? xs)
		  ys
		  (set-union (set-add xs (car ys)) (cdr ys)))))

(define (subset? xs ys)
  (if (null? xs)
	  #t
	  (if (null? ys)
		  #f
		  (if (contains ys (car xs))
			  (subset? (cdr xs) ys)
			  #f))))

(define (assoc-set xs key value)
  (if (null? xs)
	  (cons (cons key value) xs)
	  (if (equal? (caar xs) key)
		  (cons (cons key value) (cdr xs))
		  (cons (car xs) (assoc-set (cdr xs) key value)))))

(define (assoc-lookup xs key)
  (if (null? xs)
	  #f
	  (if (equal? (caar xs) key)
		  (cdar xs)
		  (assoc-lookup (cdr xs) key))))

;; =============================================================

(define core-forms
  (list 'define
		'lambda
		'quote
		'syntax-quote
		'set!
		'begin
		'if
		'define-syntax
		'call-with-continuation
		'call/cc
		'require
		'export))

(define scope gensym)

(define core-scope (scope))

(define modules (make-dictionary))

(define all-bindings '())

(define (add-binding! id binding)
  (set! all-bindings (assoc-set all-bindings id binding)))

(for-each (lambda (sym)
			(add-binding! (syntax sym (list core-scope)) sym))
		  core-forms)

(define (adjust-scope s sc op)
  (if (syntax? s)
	  (syntax (syntax->datum s)
			  (op (syntax-scopes s) sc))
	  (if (pair? s)
		  (cons (adjust-scope (car s) sc op)
				(adjust-scope (cdr s) sc op))
		  s)))

(define (set-flip s e)
  (if (contains s e)
	  (remove s e)
	  (set-add s e)))

(define (add-scope s sc)
  (adjust-scope s sc set-add))

(define (flip-scope s sc)
  (adjust-scope s sc set-flip))

(define (resolve id)
  (define candidate-ids (find-all-matching-bindings id))
  (define max-id (void))
  (if (null? candidate-ids)
	  (error "Error unresolved identifier:"
			 id
			 (syntax-source-info id))
	  (begin
		(set! max-id (argmax (lambda (id)
							   (length (syntax-scopes id)))
							 candidate-ids))
		(check-unambiguous max-id candidate-ids)
		(assoc-lookup all-bindings max-id))))

(define (find-all-matching-bindings id)
  (fold-left (lambda (b xs)
			   (define c-id (car b))
			   (if (if (eq? (syntax->datum c-id) (syntax->datum id))
					   (subset? (syntax-scopes c-id) (syntax-scopes id)) #f)
				   (cons c-id xs)
				   xs)) '() all-bindings))

(define (check-unambiguous max-id candidate-ids)
  (for-each (lambda (c-id)
			  (if (subset? (syntax-scopes c-id)
						   (syntax-scopes max-id))
				  #t
				  (error "ambiguous:" max-id)))
			candidate-ids))

(define (introduce s)
  (add-scope s core-scope))

(define variable (gensym))

(define (empty-env)
  (make-dictionary))

(define (env-extend env key value)
  (dictionary-set! env key value)
  env)

(define (env-lookup env key)
  (dictionary-ref env key #f))

(define (expand s env)
  (if (identifier? s)
	  (expand-identifier s env)
	  (if (if (pair? s) (identifier? (car s)) #f)
		  (expand-id-application-form s env)
		  (if (list? s)
			  (expand-app s env)
			  ;; self evaluating?
			  ;; (error "error (1) bad syntax:" (syntax->datum s))
			  s))))

(define (expand-identifier s env)
  (define binding (resolve s))
  (define v (void))
  (if (not binding)
	  (error "free variable:" (syntax->datum s))
	  (if (contains core-forms binding)
		  (error "error (2) bad syntax:" (syntax->datum s))
		  (begin
			(set! v (env-lookup env binding))
			(if (eq? v variable) s
				(if (not v)
					(error "out of context" (syntax->datum s))
					(if (procedure? v) s
						(error "error (3) bad syntax" (syntax->datum s)))))))))

(define (expand-id-application-form s env)
  (define binding (resolve (car s)))
  (define v (void))
  (if (equal? binding 'lambda)
	  (expand-lambda s env)
	  (if (equal? binding 'define)
		  (expand-define s env)
		  (if (equal? binding 'define-syntax)
			  (expand-define-syntax s env)
			  (if (equal? binding 'quote) s
				  (if (equal? binding 'syntax-quote) s
					  (if (equal? binding 'export) s
						  (if (equal? binding 'require)
							  (expand-require s env)
							  (if (contains core-forms binding)
								  (expand-core-form s env)
								  (begin
									(set! v (env-lookup env binding))
									(if (procedure? v)
										(expand (apply-transformer v s) env)
										(expand-app s env))))))))))))

(define (apply-transformer t s)
  (define intro-scope (scope))
  (define intro-s (add-scope s intro-scope))
  (flip-scope (syntax->list (t intro-s)) intro-scope))

(define (expand-app s env)
  (map (lambda (sub-s) (expand sub-s env))
	   s))

(define (add-arg-scope args sc)
  (if (null? args) args
	  (if (pair? args)
		  (cons (add-scope (car args) sc)
				(add-arg-scope (cdr args) sc))
		  (add-scope args sc))))

(define (add-arg-bindings args env)
  (define binding (void))
  (if (null? args) args
	  (if (pair? args)
		  (begin
			(add-arg-bindings (car args) env)
			(add-arg-bindings (cdr args) env))
		  (begin
			(set! binding (gensym))
			(add-binding! args binding)
			(env-extend env binding variable)))))

(define (expand-lambda s env)
  (define lambda-id (car s))
  (define arg-ids (cadr s))
  (define body (cddr s))
  (define sc (scope))
  (define ids (add-arg-scope arg-ids sc))
  (add-arg-bindings ids env)
  (define exp-body (expand (add-scope body sc)
						   env))
  (append (list lambda-id ids) exp-body))

(define (expand-require s env)
  (define require-id (car s))
  (define file-name (syntax->datum (cadr s)))
  (define m-scope (scope))
  (define scopes (syntax-scopes require-id))
  (define imports (dictionary-ref modules file-name #f))
  (if imports imports
	  (begin
		(set! s (expand
				 (add-scope (introduce (syntax->list (read-file file-name)))
							m-scope) env))
		(set! imports
			  (fold-left
			   (lambda (exp xs)
				 (if (pair? exp)
					 (if (identifier? (car exp))
						 (if (equal? (syntax->datum (car exp))
									 'export)
							 (cons (cadr (cadr exp)) xs)
							 xs)
						 xs)
					 xs))
			   '()
			   s))
		(dictionary-set! modules file-name imports)))
  (for-each (lambda (v)
			  (define stx (resolve v))
			  (add-binding! (syntax (syntax->datum v) scopes)
							stx))
			imports)
  s)

(define (expand-core-form s env)
  (define id (car s))
  (define exp-body (expand (cdr s) env))
  (cons id exp-body))

(define (expand-define s env)
  (define define-id (car s))
  (define lhs (cadr s))
  (define rest (cddr s))
  (define rhs (void))
  (define binding (gensym))
  (define scopes (syntax-scopes define-id))
  (if (pair? lhs) ;; procedure define
	  (begin
		(add-binding! (car lhs) binding)
		(env-extend env binding variable)
		(set! rhs (expand (append (list (syntax 'lambda scopes) (cdr lhs)) rest) env))
		(set! lhs (car lhs)))
	  (if (identifier? lhs)
		  (begin
			(add-binding! lhs binding)
			(env-extend env binding variable)
			(set! rhs (expand (car rest) env)))
		  (error "error bad syntax:" (syntax->datum s))))
  (list define-id lhs rhs))

(define (expand-define-syntax s env)
  (define define-id (car s))
  (define lhs (cadr s))
  (define rest (cddr s))
  (define rhs (void))
  (define binding (gensym))
  (define scopes (syntax-scopes define-id))
  (if (pair? lhs) ;; procedure define
	  (begin
		(add-binding! (car lhs) binding)
		(env-extend env binding variable)
		(set! rhs (expand (append (list (syntax 'lambda scopes) (cdr lhs)) rest) env))
		(set! lhs (car lhs)))
	  (if (identifier? lhs)
		  (begin
			(add-binding! lhs binding)
			(env-extend env binding variable)
			(set! rhs (expand (car rest) env)))
		  (error "error bad syntax:" (syntax->datum s))))
  (env-extend env binding (eval (datum->syntax define-id (compile rhs))))
  (list define-id lhs rhs))

(define (compile s)
  (define r (void))
  (if (identifier? s) (resolve s)
	  (if (pair? s)
		  (if (identifier? (car s))
			  (begin
				(set! r (resolve (car s)))
				(if (equal? r 'lambda)
					(compile-lambda s)
					(if (equal? r 'quote) s
						(if (equal? r 'syntax-quote) s
							(map compile s)))))
			  (map compile s))
		  s)))

(define (resolve-args args)
  (if (null? args) args
	  (if (pair? args)
		  (cons (resolve-args (car args))
				(resolve-args (cdr args)))
		  (resolve args))))

(define (compile-lambda s)
  (define lambda-id (car s))
  (define ids (cadr s))
  (define body (cddr s))
  (append (list  lambda-id (resolve-args ids)) (compile body)))

(define (register-variables ls env)
  (for-each (lambda (v)
			  (add-binding! (syntax v (list core-scope)) v)
			  (env-extend env v variable))
			ls))

(define (register-macros alist env)
  (for-each (lambda (p)
			  (add-binding! (syntax (car p) (list core-scope))
							(car p))
			  (env-extend env (car p) (cdr p)))
			alist))

(define (begin-expansion form vars macros)
  (define env (empty-env))
  (register-variables vars env)
  (register-macros macros env)
  (define *form
	(expand (introduce (syntax->list form)) env))
  (datum->syntax form (compile *form)))

(define form (read-file (car (get-vargs))))
(define file-scope (scope))
(eval (datum->syntax form
					 (compile
					  (expand
					   (add-scope (introduce (syntax->list form)) file-scope)
					   ((lambda (env)
						  (for-each (lambda (e)
									  (add-binding! (syntax (car e) (list core-scope))
													(car e))
									  (env-extend env (car e) variable))
									(builtins))
						  env) (empty-env))))))
