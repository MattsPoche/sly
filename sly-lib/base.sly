;;(require "sly-lib/expander.sly")
(require "sly-lib/quasiquote.sly")
(require "sly-lib/macros1.sly")
(require "sly-lib/syntax-case.sly")
(require "sly-lib/syntax-rules.sly")

(displayln "hello, from base.sly\n")
;; (define exported-variables
;;   (list (cons 'displayln displayln)
;; 		(cons 'caar caar)
;; 		(cons 'cddr cddr)
;; 		(cons 'cdar cdar)
;; 		(cons 'cadr cadr)
;; 		(cons 'caddr caddr)
;; 		(cons 'cdddr cdddr)
;; 		(cons 'cadddr cadddr)
;; 		(cons 'zero? zero?)
;; 		(cons 'fold-left fold-left)
;; 		(cons 'fold-right fold-right)
;; 		(cons 'append append)
;; 		(cons 'reverse reverse)
;; 		(cons 'last-pair last-pair)
;; 		(cons 'list-copy list-copy)
;; 		(cons 'length length)
;; 		(cons 'list-ref list-ref)
;; 		(cons 'length length)
;; 		(cons 'count count)
;; 		(cons 'map map)
;; 		(cons 'for-each for-each)
;; 		(cons 'set-add set-add)
;; 		(cons 'set-union set-union)
;; 		(cons 'subset? subset?)
;; 		(cons 'assoc-set assoc-set)
;; 		(cons 'assoc-lookup assoc-lookup)
;; 		(cons 'expand expand)))

;; (define exported-syntax
;;   (list (cons 'and and)
;; 		(cons 'or or)
;; 		(cons 'let let)
;; 		(cons 'let* let*)
;; 		(cons 'letrec letrec)
;; 		(cons 'letrec*-helper letrec*-helper) ;; TODO: I shouldn't have to import this
;; 		(cons 'letrec* letrec*)
;; 		(cons 'cond cond)
;; 		(cons 'when when)
;; 		(cons 'unless unless)
;; 		(cons 'inc inc)
;; 		(cons 'dec dec)
;; 		(cons 'inc! inc!)
;; 		(cons 'dec! dec!)
;; 		(cons 'quasiquote quasiquote)
;; 		(cons 'syntax-quasiquote syntax-quasiquote)
;; 		(cons 'syntax-case syntax-case)
;; 		(cons 'syntax-rules syntax-rules)))

;; (list exported-variables exported-syntax) ;; exported module
