(require "sly-lib/list.sly")

;;; Basic implementation of quasiquote and syntax-quasiquote

(export 'quasiquote)
(export 'syntax-quasiquote)

(define-syntax (quasiquote form)
  (define (qq term)
	(define q '())
	(define term* '())
	(if (null? term)
		'()
		(if (pair? term)
			(begin
			  (set! q (car term))
			  (if (identifier=? q #'quasiquote)
				  (begin
					(set! term* (cadr term))
					(if (pair? term*)
						'()
						(set! term* (list #'quote term*))))
				  (if (identifier=? q #'unquote)
					  (set! term* (cadr term))
					  (if (identifier=? q #'unquote-splice)
						  (set! term* (cons '**UNQUOTE-SPLICE** (cadr term)))
						  (set! term* (list #'quasiquote term))))))
			(set! term* (list #'quote term))))
	term*)

  (define (transform term form)
	(define term* (qq term))
	(if (if (pair? term*) (equal? (car term*) '**UNQUOTE-SPLICE**) #f)
		(set! term* (cons '**UNQUOTE-SPLICE** (list #'append (cdr term*) form)))
		(if (if (pair? form) (equal? (car form) '**UNQUOTE-SPLICE**) #f)
			(set! term* (list #'cons term* (cdr form)))
			(set! term* (list #'cons term* form))))
	term*)

  (define form* (cadr form))
  (if (pair? form*)
	  (fold-right transform '() form*)
	  (list #'quote form*)))

(define-syntax (syntax-quasiquote form)
  (define (qq term)
	(define q '())
	(define term* '())
	(if (null? term)
		'()
		(if (pair? term)
			(begin
			  (set! q (car term))
			  (if (identifier=? q #'syntax-quasiquote)
				  (begin
					(set! term* (cadr term))
					(if (pair? term*)
						'()
						(set! term* (list #'syntax-quote term*))))
				  (if (identifier=? q #'syntax-unquote)
					  (set! term* (cadr term))
					  (if (identifier=? q #'syntax-unquote-splice)
						  (set! term* (cons '**UNQUOTE-SPLICE** (cadr term)))
						  (set! term* (list #'syntax-quasiquote term))))))
			(set! term* (list #'syntax-quote term))))
	term*)

  (define (transform term form)
	(define term* (qq term))
	(if (if (pair? term*) (equal? (car term*) '**UNQUOTE-SPLICE**) #f)
		(set! term* (cons '**UNQUOTE-SPLICE** (list #'append (cdr term*) form)))
		(if (if (pair? form) (equal? (car form) '**UNQUOTE-SPLICE**) #f)
			(set! term* (list #'cons term* (cdr form)))
			(set! term* (list #'cons term* form))))
	term*)

  (define form* (cadr form))
  (if (pair? form*)
	  (list #'datum->syntax
			(list #'syntax-quote (car form))
			(fold-right transform '() form*))
	  (list #'syntax-quote form*)))
