(load "sly-lib/list.sly")

(define (qq term)
  (define q '())
  (define term* '())
  (if (null? term)
	  '()
	  (if (pair? term)
		  (begin
			(set! q (car term))
			(if (identifier=? q #'quasiquote)
				(begin
				  (set! term* (cadr term))
				  (if (pair? term*)
					  '()
					  (set! term* (list #'quote term*))))
				(if (identifier=? q #'unquote)
					(set! term* (cadr term))
					(if (identifier=? q #'unquote-splice)
						(set! term* (cons '**UNQUOTE-SPLICE** (cadr term)))
						'()))))
		  (set! term* (list #'quote term))))
  term*)

(define (transform term form)
  (define term* (qq term))
  (if (pair? term*)
	  (if (if (pair? form) (equal? (car form) '**SPLICE-ME**) #f)
		  (if (equal? (car term*) '**UNQUOTE-SPLICE**)
			  (set! term* (list '**UNQUOTE-SPLICE** (list #'append (cdr term*) (cadr form))))
			  (set! term* (list #'cons term* (cadr form))))
		  (if (equal? (car term*) '**UNQUOTE-SPLICE**)
			  (set! term* (list '**SPLICE-ME** (list #'append (cdr term*) (cons #'list form))))
			  (set! term* (cons term* form))))
	  (set! term* (cons term* form)))
  term*)

(define-syntax (quasiquote form)
  (define form* (cadr (syntax->list form)))
  (if (pair? form*)
	  (begin
		(set! form* (fold-right transform '() form*))
		(if (if (pair? form*) (pair? (car form*)) #f)
			(datum->syntax form (cons #'list form*))
			(datum->syntax form form*)))
	  (datum->syntax form (list #'quote form*))))
