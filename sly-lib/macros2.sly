(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")
(require "sly-lib/syntax-case.sly")
(require "sly-lib/syntax-rules.sly")
(require "sly-lib/with-syntax.sly")
(require "sly-lib/macros1.sly")

(provide cond)

(define-syntax cond
  (lambda (x)
    (syntax-case x ()
      [(_ c1 c2 ...)
       (let f ([c1 #'c1] [cmore #'(c2 ...)])
         (if (null? cmore)
             (syntax-case c1 (else =>)
               [(else e1 e2 ...) #'(begin e1 e2 ...)]
               [(e0) #'(let ([t e0]) (if t t))]
               [(e0 => e1) #'(let ([t e0]) (if t (e1 t) (void)))]
               [(e0 e1 e2 ...) #'(if e0 (begin e1 e2 ...) (void))])
			 ;; is this syntax (f (car cmore) (cdr cmore))
             (with-syntax ([rest (f (car cmore) (cdr cmore))])
               (syntax-case c1 (=>)
                 [(e0) #'(let ([t e0]) (if t t rest))]
                 [(e0 => e1) #'(let ([t e0]) (if t (e1 t) rest))]
                 [(e0 e1 e2 ...)
                  #'(if e0 (begin e1 e2 ...) rest)]))))])))

;; (define-syntax cond
;;   (lambda (x)
;;     (syntax-case x ()
;;       ((_ c1 c2 ...)
;;        (let f ((c1 (syntax c1)) (cmore (syntax (c2 ...))))
;;          (if (null? cmore)
;;              (syntax-case c1 (else =>)
;;                ((else e1 e2 ...) (syntax (begin e1 e2 ...)))
;;                ((e0) (syntax (let ((t e0)) (if t t))))
;;                ((e0 => e1) (syntax (let ((t e0)) (if t (e1 t)))))
;;                ((e0 e1 e2 ...) (syntax (if e0 (begin e1 e2 ...)))))
;;              (with-syntax ((rest (f (car cmore) (cdr cmore))))
;;                (syntax-case c1 (=>)
;;                  ((e0) (syntax (let ((t e0)) (if t t rest))))
;;                  ((e0 => e1) (syntax (let ((t e0)) (if t (e1 t) rest))))
;;                  ((e0 e1 e2 ...)
;;                   (syntax (if e0 (begin e1 e2 ...) rest)))))))))))
