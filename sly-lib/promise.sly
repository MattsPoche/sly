(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")
(require "sly-lib/syntax-case.sly")
(require "sly-lib/syntax-rules.sly")
(require "sly-lib/with-syntax.sly")
(require "sly-lib/basic-special-forms.sly")
(require "sly-lib/module.sly")
(require "sly-lib/kwargs.sly")

(provide
 force
 delay
 stream-car
 stream-cdr
 make-stream
 in-range
 in-list
 in-vector
 vector->stream
 in-string
 string->stream
 for
 for/list)

(define (make-promise p)
  (let ([val #f]
		[set? #f])
	(lambda ()
	  (unless set?
		(let ([x (p)])
		  (unless set?
			(begin (set! val x)
				   (set! set? #t)))))
	  val)))

(define (force p) (p))

(define-syntax delay
  (syntax-rules ()
	[(_ exp) (make-promise (lambda () exp))]))

(define (stream-car s) (car (force s)))
(define (stream-cdr s) (cdr (force s)))

(define (make-stream proc initial-state)
  (delay (proc initial-state)))

(define end-of-stream (gensym))

(define-syntax for
  (syntax-rules ()
	[(_ (v stream) body ...)
	 (let ([s stream])
	   (let loop ([v (stream-car s)]
				  [s (stream-cdr s)])
		 (unless (eq? v end-of-stream)
		   body ...
		   (loop (stream-car s)
				 (stream-cdr s)))))]))

(define-syntax for/list
  (syntax-rules ()
	[(_ (v stream) body ...)
	 (let ([s stream])
	   (let loop ([v (stream-car s)]
				  [s (stream-cdr s)])
		 (if (eq? v end-of-stream)
			 '()
			 (cons (let () body ...)
				   (loop (stream-car s)
						 (stream-cdr s))))))]))

(define (in-list xs)
  (make-stream
   (lambda (x)
	 (if (null? x)
		 (cons end-of-stream
			   (in-list x))
		 (cons (car x)
			   (in-list (cdr x)))))
   xs))

(define (vector->stream vec start end)
  (make-stream
   (lambda (i)
	 (if (< i end)
		 (cons (vector-ref vec i)
			   (vector->stream vec (+ i 1) end))
		 (cons end-of-stream
			   (vector->stream vec i end))))
   start))

(define (string->stream str start end)
  (make-stream
   (lambda (i)
	 (if (< i end)
		 (cons (string-ref str i)
			   (string->stream str (+ i 1) end))
		 (cons end-of-stream
			   (string->stream str i end))))
   start))

(define (in-string str)
  (string->stream str 0 (string-length str)))

(define (in-vector vec)
  (vector->stream vec 0 (vector-length vec)))

(define-syntax in-range
  (syntax-rules (.. :)
	[(_ end)
	 (in-range& 'end: end)]
	[(_ end : step)
	 (in-range& 'end: end 'step: step)]
	[(_ start .. end)
	 (in-range& 'start: start 'end: end)]
	[(_ start .. end : step)
	 (in-range& 'start: start 'end: end 'step: step)]))

(define& (in-range& [start: 0] [end: 1] [step: 1])
  (make-stream
   (lambda (x)
	 (if (< x end:)
		 (cons x
			   (in-range&
				'start: (+ x step:)
				'end: end:
				'step: step:))
		 (cons end-of-stream
			   (in-range&
				'start: x
				'end: end:
				'step: step:))))
   start:))
