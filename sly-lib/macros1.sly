(load "sly-lib/quasiquote.sly")

(define-syntax (and form)
  (define *form (cdr (syntax->list form)))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax form x)
	  #`(if #,x (and #,@xs) #f)))

(define-syntax (or form)
  (define *form (cdr (syntax->list form)))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax form x)
	  #`(if #,x #t (or #,@xs))))

(define-syntax (let form)
  ;(displayln *form)
  (define *form (cdr (syntax->list form)))
  (define name     '())
  (define bindings '())
  (define bodies   '())
  (displayln *form)
  (if (pair? (car *form))
	  (begin
		(set! bindings (car *form))
		(set! bodies (cdr *form))
		(set! *form #`((lambda #,(map car bindings) #,@bodies) #,@(map cadr bindings))))
	  (begin
		(set! name (car *form))
		(set! bindings (cadr *form))
		(set! bodies (cddr *form))
		(set! *form #`((lambda ()
						 (define (#,name #,@(map car bindings))
						   #,@(map cadr bindings))
						 (#,name #,@(map cadr bindings)))))))
  (displayln *form)
  *form)

(define-syntax (let* form)
  (define *form (cdr (syntax->list form)))
  (define bindings (car *form))
  (define bodies (cdr *form))
  (if (< (length bindings) 2)
	  (datum->syntax form (append (list #'let bindings) bodies))
	  (datum->syntax form (list #'let (list (car bindings))
								(append (list #'let* (cdr bindings)) bodies)))))

(define-syntax (cond form)
  (define clauses (cdr (syntax->list form)))
  (define head (car clauses))
  (define rest (cdr clauses))
  (if (null? rest)
	  #`(if #,(car head) #,(cadr head) #,(void))
	  (if (identifier=? (caar rest) #'else)
		  #`(if #,(car head) #,(cadr head) #,(car (cdar rest)))
		  #`(if #,(car head) #,(cadr head) (cond #,@rest)))))

(define-syntax (when form)
  (define *form (syntax->list form))
  (define condition (car (cdr *form)))
  (define bodies (cdr (cdr *form)))
  #`(if #,condition (begin #,@bodies) #,(void)))

(define-syntax (unless form)
  (define *form (syntax->list form))
  (define condition (car (cdr *form)))
  (define bodies (cdr (cdr *form)))
  #`(if #,condition #,(void) (begin #,@bodies)))

(define-syntax (inc form)
  #`(+ #,(cadr (syntax->list form)) 1))

(define-syntax (dec form)
  #`(- #,(cadr (syntax->list form)) 1))

(define-syntax (inc! form)
  (define *form (syntax->list form))
  (define var (cadr *form))
  #`(begin (set! #,var (+ #,var 1))))

(define-syntax (dec! form)
  (define *form (syntax->list form))
  (define var (cadr *form))
  #`(begin (set! #,var (- #,var 1))))
