(load "sly-lib/list.sly")

(define-syntax (and form)
  (define *form (cdr (syntax->list form)))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax form x)
	  (datum->syntax form (list #'if x (cons #'and xs) #f))))

(define-syntax (or form)
  (define *form (cdr (syntax->list form)))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax form x)
	  (datum->syntax form (list #'if x #t (cons #'or xs)))))

(define-syntax (let form)
  (define *form (cdr (syntax->list form)))
  (define (-let bindings bodies)
	(set! bindings (fold-right
					(lambda (x y)
					  (cons (cons (car x) (car y))
							(cons (car (cdr x)) (cdr y))))
					'(() . ())
					bindings))
	(define params (car bindings))
	(define values (cdr bindings))
	(cons (append (list #'lambda params) bodies) values))
  (define (named-let name bindings bodies)
	(define fn (-let bindings bodies))
	(list (list #'lambda '()
				(list #'define name (car fn))
				(cons name (cdr fn)))))
  (if (pair? (car *form))
	  (datum->syntax form (-let (car *form)
								(cdr *form)))
	  (datum->syntax form (named-let (car *form)
									 (car (cdr *form))
									 (cdr (cdr *form))))))

(define-syntax (let* form)
  (define *form (cdr (syntax->list form)))
  (define bindings (car *form))
  (define bodies (cdr *form))
  (if (< (length bindings) 2)
	  (datum->syntax form (append (list #'let bindings) bodies))
	  (datum->syntax form (list #'let (list (car bindings))
								(append (list #'let* (cdr bindings)) bodies)))))

(define-syntax (cond form)
  (define clauses (cdr (syntax->list form)))
  (define head (car clauses))
  (define rest (cdr clauses))
  (if (null? rest)
	  (datum->syntax form (list #'if (car head) (car (cdr head)) (void)))
	  (if (identifier=? (car (car rest)) #'else)
		  (datum->syntax form (list #'if (car head) (car (cdr head)) (car (cdr (car rest)))))
		  (datum->syntax form (list #'if (car head) (car (cdr head)) (cons #'cond rest))))))

(define-syntax (when form)
  (define *form (syntax->list form))
  (define condition (car (cdr *form)))
  (define bodies (cdr (cdr *form)))
  (datum->syntax form (list #'if condition (cons #'begin bodies) (void))))

(define-syntax (unless form)
  (define *form (syntax->list form))
  (define condition (car (cdr *form)))
  (define bodies (cdr (cdr *form)))
  (datum->syntax form (list #'if condition (void) (cons #'begin bodies))))
