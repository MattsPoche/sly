(load "sly-lib/std.sly")

(define-syntax (and form)
  (define *form (cdr (syntax->datum form)))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax form x)
	  (datum->syntax form (list 'if x (cons 'and xs) #f))))

(define-syntax (or form)
  (define *form (cdr (syntax->datum form)))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax form x)
	  (datum->syntax form (list 'if x #t (cons 'or xs)))))

(define-syntax (let form)
  (define *form (cdr (syntax->datum form)))
  (define (-let bindings bodies)
	(set! bindings (fold-right
					(lambda (x y)
					  (cons (cons (car x) (car y))
							(cons (car (cdr x)) (cdr y))))
					'(() . ())
					bindings))
	(define params (car bindings))
	(define values (cdr bindings))
	(cons (append (list 'lambda params) bodies) values))
  (define (named-let name bindings bodies)
	(define fn (-let bindings bodies))
	(list (list 'lambda '()
				(list 'define name (car fn))
				(cons name (cdr fn)))))
  (if (pair? (car *form))
	  (datum->syntax form (-let (car *form)
								(cdr *form)))
	  (datum->syntax form (named-let (car *form)
									 (car (cdr *form))
									 (cdr (cdr *form))))))

(define-syntax (let* form)
  (define *form (cdr (syntax->datum form)))
  (define bindings (car *form))
  (define bodies (cdr *form))
  (if (< (length bindings) 2)
	  (datum->syntax form (append (list 'let bindings) bodies))
	  (datum->syntax form (list 'let (list (car bindings))
								(append (list 'let* (cdr bindings)) bodies)))))

(display "(and #t #t) => ")(display (and #t #t))(display "\n")
(display "(and #t #f) => ")(display (and #t #f))(display "\n")
(display "(and #f #t) => ")(display (and #f #t))(display "\n")
(display "(and #f #f) => ")(display (and #f #f))(display "\n")
(display "(or #t #t)  => ")(display (or #t #t))(display "\n")
(display "(or #t #f)  => ")(display (or #t #f))(display "\n")
(display "(or #f #t)  => ")(display (or #f #t))(display "\n")
(display "(or #f #f)  => ")(display (or #f #f))(display "\n")

(let ((x "hello")
	  (y "world"))
  (display x)(display "\n")
  (display y)(display "\n"))

(let loop ((i 0))
  (if (< i 10)
	  (begin
		(displayln i)
		(loop (+ i 1)))
	  (displayln "End of loop")))

(let* ((x 69)
	   (y 420)
	   (z (+ x y)))
  (displayln x)
  (displayln y)
  (displayln z))
