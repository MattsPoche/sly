(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")
(require "sly-lib/syntax-case.sly")
(require "sly-lib/syntax-rules.sly")
(require "sly-lib/with-syntax.sly")

(provide and
		 or
		 let
		 let*
		 letrec
		 cond
		 when
		 unless)

(define-syntax and
  (syntax-rules ()
	[(_ x) x]
	[(_ x1 x2 ...)
	 (if x1 (and x2 ...) #f)]))

(define-syntax or
  (syntax-rules ()
	[(_ x) x]
	[(_ x1 x2 ...)
	 (if x1 #t (or x2 ...))]))

(define-syntax let
  (syntax-rules ()
	[(_ ([var val] ...) body ...)
	 ((lambda (var ...) body ...) val ...)]
	[(_ name ([var val] ...) body ...)
	 ((lambda ()
		(define name (lambda (var ...) body ...))
		(name val ...)))]))

(define-syntax let*
  (syntax-rules ()
	[(_ () body ...)
	 (let () body ...)]
	[(_ ([var val] [var* val*] ...) body ...)
	 (let ([var val])
	   (let* ([var* val*] ...) body ...))]))

;; (define-syntax (letrec-helper form)
;;   (define *form (cdr form))
;;   (define bindings (car *form))
;;   (define bodies (cdr *form))
;;   (if (null? bindings)
;; 	  #`(begin #,@bodies)
;; 	  #`(begin
;; 		  (define #,@(car bindings))
;; 		  (letrec-helper #,(cdr bindings) #,@bodies))))

;; (define-syntax (letrec form)
;;   (define *form (cdr form))
;;   (define bindings (car *form))
;;   (define bodies (cdr *form))
;;   #`((lambda ()
;; 	   (letrec-helper #,bindings #,@bodies))))

(define-syntax letrec-helper
  (syntax-rules ()
	[(_ () body ...)
	 (begin body ...)]
	[(_ ([var val] [var* val*] ...) body ...)
	 (begin
	   (define var val)
	   (letrec-helper [var* val*] ...) body...)]))

(define-syntax letrec
  (syntax-rules ()
	[(_ bindings body ...)
	 ((lambda ()
		(letrec-helper bindings body ...)))]))

(define-syntax cond
  (lambda (x)
    (syntax-case x ()
      [(_ c1 c2 ...)
       (let f ([c1 #'c1] [cmore #'(c2 ...)])
         (if (null? cmore)
             (syntax-case c1 (else =>)
               [(else e1 e2 ...) #'(begin e1 e2 ...)]
               [(e0) #'(let ([t e0]) (if t t))]
               [(e0 => e1) #'(let ([t e0]) (if t (e1 t) (void)))]
               [(e0 e1 e2 ...) #'(if e0 (begin e1 e2 ...) (void))])
             (with-syntax ([rest (f (car cmore) (cdr cmore))])
               (syntax-case c1 (=>)
                 [(e0) #'(let ([t e0]) (if t t rest))]
                 [(e0 => e1) #'(let ([t e0]) (if t (e1 t) rest))]
                 [(e0 e1 e2 ...)
                  #'(if e0 (begin e1 e2 ...) rest)]))))])))

;;; TODO: Implement `do' form.

(define-syntax when
  (syntax-rules ()
	[(_ condition body ...)
	 (if condition
		 (begin body ...)
		 (void))]))

(define-syntax unless
  (syntax-rules ()
	[(_ condition body ...)
	 (if condition
		 (void)
		 (begin body ...))]))

(display "FINISHED FILE: sly-lib/macros1.sly\n")
