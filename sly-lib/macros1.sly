(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")

(define-syntax (and form)
  (define *form (cdr form))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax (car form) x)
	  #`(if #,x (and #,@xs) #f)))

(define-syntax (or form)
  (define *form (cdr form))
  (define x (car *form))
  (define xs (cdr *form))
  (if (null? xs)
	  (datum->syntax (car form) x)
	  #`(if #,x #t (or #,@xs))))

(define-syntax (let form)
  (define *form (cdr form))
  (define name     '())
  (define bindings '())
  (define bodies   '())
  (define out '())
  (if (or (pair? (car *form))
		  (null? (car *form)))
	  (begin
		(set! bindings (car *form))
		(set! bodies (cdr *form))
		#`((lambda #,(map car bindings) #,@bodies) #,@(map cadr bindings)))
	  (begin
		(set! name (car *form))
		(set! bindings (cadr *form))
		(set! bodies (cddr *form))
		#`((lambda ()
			 (define #,name
			   (lambda #,(map car bindings) #,@bodies))
			 (#,name #,@(map cadr bindings)))))))

(define-syntax (let* form)
  (define *form (cdr form))
  (define bindings (car *form))
  (define bodies (cdr *form))
  (if (< (length bindings) 2)
	  #`(let #,bindings #,@bodies)
	  #`(let (#,(car bindings))
		  (let* #,(cdr bindings) #,@bodies))))

(define (gen-temporaries n)
  (if (<= n 0)
	  '()
	  (cons (gensym) (gen-temporaries (- n 1)))))

(define (cons-cons p ls)
  (list (cons (car p) (car ls))
		(cons (cadr p) (cadr ls))))

(define (split ls)
  (define fst '())
  (define snd '())
  (if (null? ls)
	  '(() ())
	  (cons-cons (car ls) (split (cdr ls)))))

(define-syntax (letrec-helper form)
  (define *form (cdr form))
  (define bindings (car *form))
  (define bodies (cdr *form))
  (if (null? bindings)
	  #`(begin #,@bodies)
	  #`(begin
		  (define #,@(car bindings))
		  (letrec-helper #,(cdr bindings) #,@bodies))))

(define-syntax (letrec form)
  (define *form (cdr form))
  (define bindings (car *form))
  (define bodies (cdr *form))
  #`((lambda ()
	   (letrec-helper #,bindings #,@bodies))))


(define-syntax (cond form)
;;; TODO: This implementation of cond does not
;;; * meet the standard specified here:
;;; * https://www.scheme.com/tspl4/control.html
;;; Each clause may be one of the below forms:
;;; (test)
;;; (test expr expr* ...)
;;; (test => expr)
;;; (else expr expr* ...)
  (define clauses (cdr form))
  (define head (car clauses))
  (define rest (cdr clauses))
  (if (null? rest)
	  #`(if #,(car head) #,(cadr head) #,(void))
	  (if (identifier=? (caar rest) #'else)
		  #`(if #,(car head) #,(cadr head) #,(car (cdar rest)))
		  #`(if #,(car head) #,(cadr head) (cond #,@rest)))))

;;; TODO: Implement `case' form
;;; * case evaluates it's clauses using eqv?
;;; * which has not been implemented.

;;; TODO: Implement eqv?
;;; * finally sort out comparison operators.

;;; TODO: Implement `do' form.

(define-syntax (when form)
  (define condition (car (cdr form)))
  (define bodies (cdr (cdr form)))
  #`(if #,condition (begin #,@bodies) #,(void)))

(define-syntax (unless form)
  (define condition (car (cdr form)))
  (define bodies (cdr (cdr form)))
  #`(if #,condition #,(void) (begin #,@bodies)))

(display "FINISHED FILE: sly-lib/macros1.sly\n")
