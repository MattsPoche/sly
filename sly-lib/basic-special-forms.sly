(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")
(require "sly-lib/syntax-case.sly")
(require "sly-lib/syntax-rules.sly")
(require "sly-lib/with-syntax.sly")

(provide set-m!
		 and
		 or
		 let
		 let*
		 letrec
		 letrec*
		 cond
		 case
		 do
		 when
		 unless)

(define-syntax set-m!
  (syntax-rules (dictionary-ref)
	[(_ (dictionary-ref dict key) value)
	 (dictionary-set! dict key value)]))

(define-syntax and
  (syntax-rules ()
	[(_) #t]
	[(_ x) x]
	[(_ x1 x2 x3 ...)
	 (if x1 (and x2 x3 ...) #f)]))

(define-syntax or
  (syntax-rules ()
	[(_) #f]
	[(_ x) x]
	[(_ x1 x2 x3 ...)
	 (let ([t x1])
	   (if t t (or x2 x3 ...)))]))

(define-syntax let
  (syntax-rules ()
	[(_ ([var val] ...) body ...)
	 ((lambda (var ...) body ...) val ...)]
	[(_ name ([var val] ...) body ...)
	 ((lambda ()
		(define name (lambda (var ...) body ...))
		(name val ...)))]))

(define-syntax let*
  (syntax-rules ()
	[(_ () body ...)
	 (let () body ...)]
	[(_ ([var val] [var* val*] ...) body ...)
	 (let ([var val])
	   (let* ([var* val*] ...) body ...))]))

(define-syntax letrec*
  (syntax-rules ()
	[(_ ([var val] ...) body ...)
	 ((lambda ()
		(define var val) ...
		body ...))]))

(define-syntax letrec
  (lambda (x)
	(syntax-case x ()
	  [(_ ([id val] ...) body ...)
	   (with-syntax ([(tmp ...) (generate-temporaries #'(id ...))]
					 [((id ...) (val ...) (body ...))
					  #'((id ...) (val ...) (body ...))])
		 #'(let ([id #f] ...)
			 (let ([tmp val] ...)
			   (set! id tmp) ...
			   (let () body ...))))])))

(define-syntax cond
  (lambda (x)
    (syntax-case x ()
      [(_ c1 c2 ...)
       (let f ([c1 #'c1]
			   [cmore (syntax->list #'(c2 ...))])
         (if (null? cmore)
             (syntax-case c1 (else =>)
               [(else e1 e2 ...) #'(begin e1 e2 ...)]
               [(e0 => e1) #'(let ([t e0]) (if t (e1 t) (void)))]
               [(e0 e1 e2 ...) #'(if e0 (begin e1 e2 ...) (void))]
			   [(e0) #'(let ([t e0]) (if t t))])
             (with-syntax ([rest (f (car cmore) (cdr cmore))])
               (syntax-case c1 (=>)
                 [(e0 => e1) #'(let ([t e0]) (if t (e1 t) rest))]
                 [(e0 e1 e2 ...)
                  #'(if e0 (begin e1 e2 ...) rest)]
				 [(e0) #'(let ([t e0]) (if t t rest))]))))])))


(define-syntax case
  (lambda (x)
    (syntax-case x ()
      [(_ e c1 c2 ...)
       (with-syntax ([body
					  (let f ([c1 #'c1] [cmore (syntax->list #'(c2 ...))])
						(if (null? cmore)
							(syntax-case c1 (else)
							  [(else e1 e2 ...)  #'(begin e1 e2 ...)]
							  [((k ...) e1 e2 ...)
							   #'(if (memv t '(k ...)) (begin e1 e2 ...) (void))])
							(with-syntax ([rest (f (car cmore) (cdr cmore))])
							  (syntax-case c1 ()
								[((k ...) e1 e2 ...)
								 #'(if (memv t '(k ...))
									   (begin e1 e2 ...)
									   rest)]))))])
         #'(let ([t e]) body))])))

(define-syntax do
  (lambda (x)
    (syntax-case x ()
      [(_ (binding ...) (test res ...) exp ...)
       (with-syntax ([((var val update) ...)
                      (map (lambda (b)
                             (syntax-case b ()
                               ((var val)
                                #'(var val var))
                               ((var val update)
                                #'(var val update))))
                           (syntax->list #'(binding ...)))]
					 [(test res ...) #'(test res ...)]
					 [(exp ...) #'(exp ...)])
		 #'(let doloop ([var val] ...)
             (if test
                 (begin (void) res ...)
                 (begin exp ... (doloop update ...)))))])))

(define-syntax when
  (syntax-rules ()
	[(_ condition body ...)
	 (if condition
		 (begin body ...)
		 (void))]))

(define-syntax unless
  (syntax-rules ()
	[(_ condition body ...)
	 (if condition
		 (void)
		 (begin body ...))]))
