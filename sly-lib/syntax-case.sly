(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")
(require "sly-lib/macros1.sly")

;;; Implementation of syntax-case and related functions
;;; Reference:
;;; https://docs.racket-lang.org/guide/syntax-case.html

;;; Any syntax form /ie (syntax-quote datum)/ found in
;;; the expression clause is treated as a template and
;;; a new syntax form is constructed that can be used
;;; in the logic of the expression.

;; (define-syntax (swap stx)
;;   (syntax-case stx ()
;;     [(swap x y)
;;      (if (and (identifier? #'x)
;;               (identifier? #'y))
;;          #'(let ([tmp x])
;;              (set! x y)
;;              (set! y tmp))
;;          (raise-syntax-error #f
;;                              "not an identifier"
;;                              stx
;;                              (if (identifier? #'x)
;;                                  #'y
;;                                  #'x)))]))

;;; Here, although #'x and #'y are not the final result of the expression,
;;; they are still treated as templates that are expanded. The resulting form
;;; can be used within the expression. In this case, checking if x and y
;;; are identifiers.

;;; TODO: More tests

(define ellipsis #'...)

(define (check-ellipsis pattern)
  (and (pair? pattern)
	   (pair? (cdr pattern))
	   (identifier=? (cadr pattern) ellipsis)))

(define (contains xs x)
  (cond ((pair? xs)
		 (or (contains (car xs) x)
			 (contains (cdr xs) x)))
		(else (equal? xs x))))

(define (make-match-vars pattern literals)
  (let ([match-vars (make-dictionary)])
	(define (*make-match-vars pattern)
	  (cond ((null? pattern) #f)
			((pair? pattern)
			 (begin (*make-match-vars (car pattern))
					(*make-match-vars (cdr pattern))))
			(else (unless (or (identifier=? pattern ellipsis)
							  (contains literals pattern))
					(dictionary-set! match-vars (syntax->datum pattern) '())))))
	(*make-match-vars pattern)
	match-vars))

(define (syntax-match pattern literals form)
  (let* ([pattern (cdr (syntax->list pattern))]
		 [form (cdr (if (syntax-pair? form) (syntax->list form) form))]
		 [match-vars (make-match-vars pattern literals)])
	(define (*syntax-match pattern literals form)
	  (define (match pattern literals form)
		(cond ((and (null? pattern) (null? form)) #t)
			  ((and (identifier? pattern)
					(contains literals pattern))
			   (identifier=? pattern form))
			  ((identifier? pattern)
			   (let* ([pvar (syntax->datum pattern)]
					  [var-list (dictionary-ref match-vars pvar)])
				 (dictionary-set! match-vars pvar (append var-list (list form)))
				 #t))
			  (else #f)))
	  (define (match-repeat pattern literals form)
		(if (*syntax-match (car pattern) literals (car form))
			(if (pair? (cdr form))
				(match-repeat pattern literals (cdr form))
				form)
			form))
	  (if (pair? pattern)
		  (if (identifier? (cdr pattern))
			  (if (*syntax-match (car pattern) literals (car form))
				  (let* ([pvar (syntax->datum (cdr pattern))]
						 [var-list (dictionary-ref match-vars pvar)])
					(dictionary-set! match-vars pvar (append var-list (list (cdr form))))
					#t)
				  #f)
			  (if (check-ellipsis pattern)
				  (cond ((pair? form)
						 (*syntax-match (cddr pattern)
										literals
										(cdr (match-repeat pattern literals form))))
						((null? form) #t)
						(else #f))
				  (if (pair? form)
					  (if (*syntax-match (car pattern) literals (car form))
						  (*syntax-match (cdr pattern) literals (cdr form))
						  #f)
					  #f)))
		  (match pattern literals form)))
	(if (*syntax-match pattern literals form) match-vars #f)))

(define (construct-form template match-vars)
  (let ([*template (if (syntax-pair? template)
					  (syntax->list template)
					  template)])
	(define (construct-repeat *template match-vars)
	  (let loop ([i 0] [form '()])
		(let ([val (*construct-form *template match-vars i)])
		  (if (or (and (pair? val)
					   (contains val '**END-OF-LIST**))
				  (equal? val '**END-OF-LIST**))
			  form
			  (loop (+ i 1) (append form (list val)))))))
	(define (*construct-form *template match-vars repeat-level)
	  (if (pair? *template)
		  (if (check-ellipsis *template)
			  (let ([form (construct-repeat (car *template) match-vars)])
				(append form
						(*construct-form (cddr *template) match-vars repeat-level)))
			  (cons (*construct-form (car *template) match-vars repeat-level)
					(*construct-form (cdr *template) match-vars repeat-level)))
		  (if (identifier? *template)
			  (let ([pvar (syntax->datum *template)])
				(if (dictionary-has-key? match-vars pvar)
					(list-ref (dictionary-ref match-vars pvar) repeat-level)
					*template))
			  *template)))
	(datum->syntax template (*construct-form *template match-vars 0))))

(define (syntax-case/run-tests)
  (displayln "test 1")
  (displayln
   (let ([match-vars (syntax-match
					  #'(macro (x y) z ...) '()
					  #'(macro (foo bar) baz zaz a b c))])
	 (if match-vars
		 (construct-form #'(x z ...) match-vars)
		 #f)))

  (displayln "======================")
  (displayln "test 2")
  (displayln
   (let ([match-vars (syntax-match
					  #'(macro (x y) . z) '()
					  #'(macro (foo bar) baz zaz a b c))])
	 (if match-vars
		 (construct-form #'(the zs . z) match-vars)
		 #f)))

  (displayln "======================")
  (displayln "test 3")
  (displayln
   (let ([match-vars (syntax-match
					  #'(let (macro (var val) ...) body ...) '()
					  #'(let (macro (x 5) (y z)) (+ x y) (display "hello")))])
	 (if match-vars
		 (construct-form #'((lambda (var ...) body ...) val ...) match-vars)
		 #f)))

  (displayln "======================")
  (displayln "test 4")
  (displayln
   (let ([match-vars (syntax-match
					  #'(let ((var val) ...) body ...) '()
					  #'(let ((x 5) (y z) (w 69)) (+ x y) (display "hello")))])
	 (if match-vars
		 (construct-form #'((lambda (var ...) body ...) val ...) match-vars)
		 #f)))

  (displayln "======================")
  (displayln "test 5")
  (displayln
   (let ([match-vars (syntax-match
					  #'(macro (a ...) (b ...)) '()
					  #'(macro (a b c d e f g e) (1 2 3 4 5 6 7 8)))])
	 (if match-vars
		 (construct-form #'((a b) ...) match-vars)
		 #f)))
  (displayln "======================")

  (displayln "test 6")
  (displayln
   (let ([match-vars (syntax-match
					  #'(macro (a ...) (b ...)) '()
					  #'(macro (a b c d e f g e) (1 2 3 4 5 6 7 8)))])
	 (if match-vars
		 (construct-form #'((a (b ...)) ...) match-vars)
		 #f)))
  (displayln "======================")

  (displayln "test 7")
  (displayln (syntax-match
			  #'(let ((var val) ...) body ...) '()
			  #'(let x)))

  (displayln "test 8")
  (displayln (syntax-match
			  #'(let ((var val) ...) body ...) '()
			  #'(let x)))
  (displayln "======================")

  (displayln "test 9")
  (displayln
   (let* ([match-vars (syntax-match
					   #'(let ((var val) ...) body ...) '()
					   #'(let () x))])
	 (if match-vars
		 (construct-form #'((lambda (var ...) body ...) val ...) match-vars)
		 #f)))
  (displayln "======================"))

;; (syntax-case/run-tests)

(define (transform-expr expr)
  ;; If a `syntax-quote' form appears in an expression,
  ;; it must be treated as a template.
  ;; This function modifies the expression, transforming
  ;; instances of syntax-quote into template expansions.
  (if (pair? expr)
	  (if (identifier=? (car expr) #'syntax-quote)
		  #`(construct-form #,expr match-vars)
		  (cons (transform-expr (car expr))
				(transform-expr (cdr expr))))
	  expr))

(define-syntax (syntax-case form)
  (let* ([*form (cdr (syntax->list form))]
		 [stx (list-ref *form 0)]
		 [literals (list-ref *form 1)]
		 [clause (list-ref *form 2)]
		 [rest (cdr (cddr *form))]
		 [pattern (car clause)]
		 [expr (transform-expr (cadr clause))])
	#`(let ([match-vars (syntax-match (syntax-quote #,pattern) #,literals #,stx)])
		(if match-vars
			#,expr
			#,(if (null? rest)
				  #'(displayln "Error invalid syntax for syntax-case.")
				  #`(syntax-case #,stx #,literals #,@rest))))))

(define exported-syntax
  (list (cons 'syntax-case syntax-case)))

(list '() exported-syntax) ;; exported module
