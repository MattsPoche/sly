(require "sly-lib/list.sly")
(require "sly-lib/quasiquote.sly")

(provide syntax-case)

;;; NOTE: This implementation of syntax-case breaks if you try to syntax-quasiquote
;;; in a match-expression template.
;;; This means that if you want to break hygiene and introduce bindings into the expansion context,
;;; doing this will not work:
;;; #`(define #,(datum->syntax #'id 'my-variable) 69)
;;; You can still break hygiene using with-syntax:
;;; (with-syntax ([my-variable (datum->syntax #'id 'my-variable)])
;;;    #'(define my-variable 69))

;;; TODO: Make quasiquoting work in syntax-case templates. See note below.

(define-syntax (syntax-case form)
  (define *form (cdr form))
  (define stx (car *form))
  (define literals (cadr *form))
  (define clause (caddr *form))
  (define rest (cdddr *form))
  (define pattern (car clause))
  (define expr (cadr clause))
  #`((lambda ()
	   (define names
		 (get-pattern-var-names (syntax-quote #,pattern) (quote #,literals)))
	   (define pvars (make-dictionary))
	   (if (match-syntax (syntax-quote #,pattern) (quote #,literals) #,stx pvars)
		   #,((lambda ()
				;; NOTE: This function scans the expression clause and wraps syntax-quote
				;; forms in construct-syntax so that templates are expanded.
				;; This does not work for syntax-quasiquote as such quasiquote forms
				;; cannot be used as templates.
				;; The issue is that syntax-quasiquote itself is a macro that expands
				;; after this function inserts the calls to construct-syntax.
				;; A possible fix is to manually expand all quasiquote-syntax forms
				;; in the expression before applying transform-expr.
				(define (transform-expr expr)
				  (if (pair? expr)
					  (if (identifier=? (car expr) #'syntax-quote)
						  #`(construct-syntax #,expr pvars names)
						  (cons (transform-expr (car expr))
								(transform-expr (cdr expr))))
					  expr))
				(transform-expr expr)))
		   #,(if (null? rest)
				 #`(begin
					 (displayln (quote #,pattern))
					 (displayln #,stx)
					 (displayln pvars)
					 (error "Error invalid syntax for syntax-case."))
				 #`(syntax-case #,stx #,literals #,@rest))))))
