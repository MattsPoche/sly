(load "sly-lib/macros1.sly")

;;; TODO: syntax-case; finish this.

(define ellipsis #'...)

(define (check-ellipsis template)
  (and (pair? template)
	   (pair? (cdr template))
	   (identifier=? (cadr template) ellipsis)))

(define (contains xs x)
  (cond ((null? xs) #f)
		((identifier=? x (car xs)) #t)
		(else (contains x (cdr xs)))))

(define (make-match-vars template literals)
  (let ([match-vars (make-dictionary)])
	(define (*make-match-vars template)
	  (cond ((null? template) #f)
			((pair? template)
			 (begin (*make-match-vars (car template))
					(*make-match-vars (cdr template))))
			(else (unless (or (identifier=? template ellipsis)
							  (contains literals template))
					(dictionary-set! match-vars (syntax->datum template) '())))))
	(*make-match-vars template)
	match-vars))

(define (syntax-match template literals form)
  (define (match template literals form)
	(cond ((and (null? template) (null? form)) #t)
		  ((and (identifier? template)
				(contains literals template)
				(identifier=? template form)) #t)
		  ((identifier? template)
		   (let* ([pvar  (syntax->datum template)]
				  [var-list (dictionary-ref match-vars pvar)])
			 (dictionary-set! match-vars pvar (cons form var-list))
			 #t))
		  (else #f)))

  (define (match-repeat template literals form)
	(if (syntax-match (car template) literals (car form))
		(if (pair? (cdr form))
			(match-repeat template literals (cdr form))
			form)
		form))


  (display "form     :: ") (displayln form)
  (display "template :: ") (displayln template)
  (displayln "===============")
  (if (pair? template)
	  (if (check-ellipsis template)
		  (if (pair? form)
			  (syntax-match (cddr template)
							literals
							(cdr (match-repeat template literals form)))
			  #f)
		  (if (pair? form)
			  (if (syntax-match (car template) literals (car form))
				  (syntax-match (cdr template) literals (cdr form))
				  #f)
			  #f)) ;; match fails
	  (match template literals form)))

(define template #'((x y) z ...))
(define literals '())
(define form #'((foo bar) baz zaz))
(define *template (syntax->list template))
(define *form (syntax->list form))
(define match-vars (make-match-vars *template literals))

(displayln (syntax-match *template '() *form))
(displayln match-vars)
