(load "sly-lib/macros1.sly")

;;; TODO: syntax-case; finish this.
;;; TODO: Test patterns/templates in tail position
;;; TODO: More tests

(define ellipsis #'...)

(define (check-ellipsis pattern)
  (and (pair? pattern)
	   (pair? (cdr pattern))
	   (identifier=? (cadr pattern) ellipsis)))

(define (contains xs x)
  (cond ((null? xs) #f)
		((equal? x (car xs)) #t)
		(else (contains (cdr xs) x))))

(define (make-match-vars pattern literals)
  (let ([match-vars (make-dictionary)])
	(define (*make-match-vars pattern)
	  (cond ((null? pattern) #f)
			((pair? pattern)
			 (begin (*make-match-vars (car pattern))
					(*make-match-vars (cdr pattern))))
			(else (unless (or (identifier=? pattern ellipsis)
							  (contains literals pattern))
					(dictionary-set! match-vars (syntax->datum pattern) '())))))
	(*make-match-vars pattern)
	match-vars))

(define (syntax-match pattern literals form)
  (let* ([pattern (syntax->list pattern)]
		 [form (if (syntax-pair? form) (syntax->list form) form)]
		 [match-vars (make-match-vars pattern literals)])
	(define (*syntax-match pattern literals form)
	  (define (match pattern literals form)
		(cond ((and (null? pattern) (null? form)) #t)
			  ((and (identifier? pattern)
					(contains literals pattern))
			   (identifier=? pattern form))
			  ((identifier? pattern)
			   (let* ([pvar (syntax->datum pattern)]
					  [var-list (dictionary-ref match-vars pvar)])
				 (dictionary-set! match-vars pvar (append var-list (list form)))
				 #t))
			  (else #f)))
	  (define (match-repeat pattern literals form)
		(if (*syntax-match (car pattern) literals (car form))
			(if (pair? (cdr form))
				(match-repeat pattern literals (cdr form))
				form)
			form))
	  (if (pair? pattern)
		  (if (identifier? (cdr pattern))
			  (if (*syntax-match (car pattern) literals (car form))
				  (let* ([pvar (syntax->datum (cdr pattern))]
						 [var-list (dictionary-ref match-vars pvar)])
					(dictionary-set! match-vars pvar (append var-list (list (cdr form))))
					#t)
				  #f)
			  (if (check-ellipsis pattern)
				  (if (pair? form)
					  (*syntax-match (cddr pattern)
									 literals
									 (cdr (match-repeat pattern literals form)))
					  #f)
				  (if (pair? form)
					  (if (*syntax-match (car pattern) literals (car form))
						  (*syntax-match (cdr pattern) literals (cdr form))
						  #f)
					  #f)))
		  (match pattern literals form)))
	(if (*syntax-match pattern literals form)
		(cons #t match-vars)
		(cons #f '()))))

(define (construct-form template match-vars)
  (let ([template (if (syntax-pair? template)
					  (syntax->list template)
					  template)])
	(define (construct-repeat template match-vars)
	  (let loop ([i 0] [form '()])
		(let ([val (*construct-form template match-vars i)])
		  (if (or (and (pair? val)
					   (contains val '**END-OF-LIST**))
				  (equal? val '**END-OF-LIST**))
			  form
			  (loop (+ i 1) (append form (list val)))))))
	(define (*construct-form template match-vars repeat-level)
	  (if (pair? template)
		  (if (check-ellipsis template)
			  (let ([form (construct-repeat (car template) match-vars)])
				(append form
						(*construct-form (cddr template) match-vars repeat-level)))
			  (cons (*construct-form (car template) match-vars repeat-level)
					(*construct-form (cdr template) match-vars repeat-level)))
		  (if (identifier? template)
			  (let ([pvar (syntax->datum template)])
				(if (dictionary-has-key? match-vars pvar)
					(list-ref (dictionary-ref match-vars pvar) repeat-level)
					template))
			  template)))
	(*construct-form template match-vars 0)))

(displayln "test 1")
(displayln
 (let* ([match-result (syntax-match
					   #'((x y) z ...) '()
					   #'((foo bar) baz zaz a b c))]
		[succeded (car match-result)]
		[match-vars (cdr match-result)])
   (displayln match-vars)
   (if succeded
	   (construct-form #'(x z ...) match-vars)
	   #f)))

(displayln "======================")
(displayln "test 2")
(displayln
 (let* ([match-result (syntax-match
					   #'((x y) . z) '()
					   #'((foo bar) baz zaz a b c))]
		[succeded (car match-result)]
		[match-vars (cdr match-result)])
   (displayln match-vars)
   (if succeded
	   (construct-form #'(the zs . z) match-vars)
	   #f)))

(displayln "======================")
(displayln "test 3")
(displayln
 (let* ([match-result (syntax-match
					   #'(let ((var val) ...) body ...) (list #'let)
					   #'(let ((x 5) (y z)) (+ x y) (display "hello")))]
		[succeded (car match-result)]
		[match-vars (cdr match-result)])
   (displayln match-vars)
   (if succeded
	   (construct-form #'((lambda (var ...) body ...) val ...) match-vars)
	   #f)))

(displayln "======================")
(displayln "test 4")
(displayln
 (let* ([match-result (syntax-match
					   #'(let ((var val) ...) body ...) (list #'let)
					   #'(let ((x 5) (y z) (w 69)) (+ x y) (display "hello")))]
		[succeded (car match-result)]
		[match-vars (cdr match-result)])
   (displayln match-vars)
   (if succeded
	   (construct-form #'((lambda (var ...) body ...) val ...) match-vars)
	   #f)))

(displayln "======================")
(displayln "test 5")
(displayln
 (let* ([match-result (syntax-match
					   #'((a ...) (b ...)) '()
					   #'((a b c d e f g e) (1 2 3 4 5 6 7 8)))]
		[succeded (car match-result)]
		[match-vars (cdr match-result)])
   (displayln match-vars)
   (if succeded
	   (construct-form #'((a b) ...) match-vars)
	   #f)))
(displayln "======================")

(displayln "test 6")
(displayln
 (let* ([match-result (syntax-match
					   #'((a ...) (b ...)) '()
					   #'((a b c d e f g e) (1 2 3 4 5 6 7 8)))]
		[succeded (car match-result)]
		[match-vars (cdr match-result)])
   (displayln match-vars)
   (if succeded
	   (construct-form #'((a (b ...)) ...) match-vars)
	   #f)))
(displayln "======================")

(displayln "test 7")
(displayln (syntax-match
			#'(let ((var val) ...) body ...) (list #'let)
			#'(let x)))

(displayln "test 8")
(displayln (syntax-match
			#'(let ((var val) ...) body ...) (list #'let)
			#'(x)))

(displayln "test 9")
(displayln (syntax-match
			#'(let ((var val) ...) body ...) (list #'let)
			#'x))

(displayln "test 10")
(displayln (syntax-match
			#'(let ((var val) ...) body ...) (list #'let)
			#'(let () x)))
