(define-syntax (test-let x)
  (syntax-case x ()
	[(_ ((var value) ...) e1 e2 ...)
	 #'((lambda (var ...) e1 e2 ...) value ...)]
	[(_ name ((var value) ...) e1 e2 ...)
	 #'((lambda ()
		  (define (name var ...) e1 e2 ...)
		  (name value ...)))]))

(test-let ((x 420) (y 69)) (displayln (* x y)))

(test-let loop ((i 0))
		  (when (< i 10)
			(display i)
			(loop (+ i 1))))
(display "\n")

(display-syntax
 "((foo bar) baz buzz) => "
 (syntax-case #'((foo bar) baz buzz) ()
   [(x y z)
	(let ()
	  (display-syntax "z :: " #'z)
	  (display-syntax "y :: " #'y)
	  (display-syntax "x :: " #'x)
	  #'(z y x))]))

(define-syntax with-syntax
  (lambda (x)
    (syntax-case x ()
      [(_ ((p e) ...) b1 b2 ...)
	   #'(syntax-case (list e ...) ()
		   [(p ...) (let () b1 b2 ...)])])))

;; UPDATE: Appears to be working more testing needed of course ;)

(define-syntax cond
  (lambda (x)
    (syntax-case x ()
      [(_ c1 c2 ...)
       (let f ([c1 #'c1] [cmore (syntax->list #'(c2 ...))])
         (if (null? cmore)
             (syntax-case c1 (else =>)
			   ;; need to check for literals in the first position
               [(else e1 e2 ...) #'(begin e1 e2 ...)]
               [(e0) #'(let ([t e0]) (if t t))]
               [(e0 => e1) #'(let ([t e0]) (if t (e1 t) (void)))]
			   ;; need to not ignore the first pattern element
               [(e0 e1 e2 ...) #'(if e0 (begin e1 e2 ...) (void))])
             (with-syntax ([rest (f (car cmore) (cdr cmore))])
               (syntax-case c1 (=>)
                 [(e0) #'(let ([t e0]) (if t t rest))]
                 [(e0 => e1) #'(let ([t e0]) (if t (e1 t) rest))]
                 [(e0 e1 e2 ...)
                  #'(if e0 (begin e1 e2 ...) rest)]))))])))

(displayln (syntax->datum (syntax-case #'(foo bar baz) ()
							[(x y z)
							 #'(z y x)])))

(displayln (syntax->datum (syntax-case
							  #'(cond [(> 69 420) (displayln "foo")]
									  [#t (displayln "bar")])
							  ()
							[(_ c1 c2 ...)
							 (let f ([c1 #'c1] [cmore (syntax->list #'(c2 ...))])
							   (if (null? cmore)
								   (syntax-case c1 (else =>)
									 [(else e1 e2 ...) #'(begin e1 e2 ...)]
									 [(e0) #'(let ([t e0]) (if t t))]
									 [(e0 => e1) #'(let ([t e0]) (if t (e1 t) (void)))]
									 [(e0 e1 e2 ...) #'(if e0 (begin e1 e2 ...) (void))])
								   (with-syntax ([rest (f (car cmore) (cdr cmore))])
									 (syntax-case c1 (=>)
									   [(e0) #'(let ([t e0]) (if t t rest))]
									   [(e0 => e1) #'(let ([t e0]) (if t (e1 t) rest))]
									   [(e0 e1 e2 ...)
										(begin
										  (display-syntax "e0 :: " #'e0)
										  (display-syntax "rest :: " #'rest)
										  #'(if e0 (begin e1 e2 ...) rest))]))))])))

(cond [(> 69 420) (displayln "foo")]
	  [#t (displayln "bar")])

(if #t (displayln "poop") (void))
