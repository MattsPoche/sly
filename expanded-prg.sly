(provide parse)

(define parse '(begin (lambda () (quote (values displayln display-syntax caar cdar cadr cddr caddr cdddr cadddr list? zero? fold-left fold-right member memv memq remove append reverse last-pair list-copy length list-ref count argmax map for-each generate-temporaries take drop assoc alist-cons alist-copy plist-get plist-put force delay stream-car stream-cdr string substring string->list list->string char-at make-stream define-module in-range in-list in-vector vector->stream in-string string->stream for for/list import set-m! provide quasiquote syntax-quasiquote and or let let* letrec letrec* cond case do when unless syntax-case syntax-rules with-syntax let*-values let-values lambda& define&))) (define rule110812 (lambda (group814) (not ((lambda (t818) (if t818 t818 ((lambda (t822) (if t822 t822 (equal? group814 (vector #f #f #f)))) (equal? group814 (vector #t #f #f))))) (equal? group814 (vector #t #t #t)))))) (define rule30824 (lambda (group826) ((lambda (t830) (if t830 t830 ((lambda (t834) (if t834 t834 ((lambda (t838) (if t838 t838 (equal? group826 (vector #f #f #t)))) (equal? group826 (vector #f #t #f))))) (equal? group826 (vector #f #t #t))))) (equal? group826 (vector #t #f #f))))) (define rule90840 (lambda (group842) ((lambda (t846) (if t846 t846 ((lambda (t850) (if t850 t850 ((lambda (t854) (if t854 t854 (equal? group842 (vector #f #f #t)))) (equal? group842 (vector #f #t #t))))) (equal? group842 (vector #t #f #f))))) (equal? group842 (vector #t #t #f))))) (define get-neighbors856 (lambda (state858 i859) ((lambda (x862 y863 z864) (vector x862 y863 z864)) (if (= i859 0) (vector-ref state858 (- (vector-length state858) 1)) (vector-ref state858 (- i859 1))) (vector-ref state858 i859) (if (= i859 (- (vector-length state858) 1)) (vector-ref state858 0) (vector-ref state858 (+ i859 1)))))) (define next-gen865 (lambda (state867 rule868) (define new-state869 (make-vector (vector-length state867))) ((lambda () (define loop872 (lambda (i874) (if (< i874 (vector-length state867)) (begin (vector-set! new-state869 i874 (rule868 (get-neighbors856 state867 i874))) (loop872 (+ i874 1))) (void)))) (loop872 0))) new-state869)) (define live-char876 "#") (define dead-char877 ".") (define print-state878 (lambda (state880) (display "|") ((lambda () (define loop883 (lambda (i885) (if (< i885 (vector-length state880)) (begin (if (vector-ref state880 i885) (display live-char876) (display dead-char877)) (loop883 (+ i885 1))) (void)))) (loop883 0))) (display "|\n"))) (define simulate887 (lambda (state889 rule890 iterations891) ((lambda () (define loop894 (lambda (i896 state897) (if (< i896 iterations891) (begin (print-state878 state897) (loop894 (+ i896 1) (next-gen865 state897 rule890))) (void)))) (loop894 0 state889))))) (define state0899 (vector #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #t)) (define state30900 (vector #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)) (displayln12 "state0 -- rule110") (simulate887 state0899 rule110812 50) (displayln12 "state30 -- rule30") (simulate887 state30900 rule30824 50) (displayln12 "state30 -- rule90") (simulate887 state30900 rule90840 50)))
